name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd api && npm ci

    - name: Run linting
      run: |
        npm run lint
        cd api && npm run lint

    - name: Run type checking
      run: |
        npm run type-check
        cd api && npm run type-check

    - name: Run tests
      run: |
        npm run test
        cd api && npm run test

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Build application
      run: npm run build

    - name: Build API
      run: |
        cd api
        npm run build

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        cd api && npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        file: ./api/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    environment: staging
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: Deploy to production
      run: |
        # Update deployment with new image
        kubectl set image deployment/dernek-panel-frontend \
          frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        kubectl set image deployment/dernek-panel-api \
          api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.sha }}

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/dernek-panel-frontend
        kubectl rollout status deployment/dernek-panel-api

    - name: Run health checks
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Check health endpoints
        curl -f http://your-domain.com/api/health || exit 1
        curl -f http://your-domain.com/api/ready || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"✅ Production deployment successful! Commit: ${{ github.sha }}\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"❌ Production deployment failed! Commit: ${{ github.sha }}\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}

  # Database migration
  migrate:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Run database migrations
      run: |
        # Add your database migration logic here
        # Example: supabase db push
        echo "Running database migrations..."

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Run performance tests
      run: |
        # Add your performance testing logic here
        # Example: lighthouse-ci, k6, etc.
        echo "Running performance tests..."
